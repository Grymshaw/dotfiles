" Better tab navigation
noremap <C-x> :bdelete<CR>
noremap <Tab> :bn<CR>
noremap <S-Tab> :bp<CR>

" lightline
set noshowmode
let g:lightline = { 'colorscheme': 'onedark' }

" Python syntax
let python_highlight_all=1
syntax on

au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |
    \ set foldmethod=indent

" js, html, and css indentation
au BufNewFile,BufRead *.js,*.html,*.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2

" Relative numbers
set relativenumber

" YouCompleteMe config
let g:ycm_server_python_interpreter='python3'
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

let g:ycm_python_interpreter_path = ''
let g:ycm_python_sys_path = []
let g:ycm_extra_conf_vim_data = [
  \  'g:ycm_python_interpreter_path',
  \  'g:ycm_python_sys_path'
  \]
let g:ycm_global_ycm_extra_conf = '~/global_extra_conf.py'

" ALE python config
let b:ale_linters = {
      \  'python': ['flake8', 'pylint'],
      \  'javascript': ['eslint'],
      \}
let g:ale_lint_on_text_changed=1

" flazz/vim-colorschemes
colorscheme PaperColor
set background=dark
nn <expr> <C-B> &background ==# "dark" ? ":set background=light\<CR>" : ":set background:dark\<CR>"

" vim-buftabline config
let g:buftabline_indicators = 1

" vim-graphql
au BufNewFile,BufRead *.prisma setfiletype graphql

"""""""""
" godot "
"""""""""
func! GodotSettings() abort
    setlocal foldmethod=expr
    setlocal tabstop=4
    nnoremap <buffer> <F4> :GodotRunLast<CR>
    nnoremap <buffer> <F5> :GodotRun<CR>
    nnoremap <buffer> <F6> :GodotRunCurrent<CR>
    nnoremap <buffer> <F7> :GodotRunFZF<CR>
endfunc
augroup godot | au!
    au FileType gdscript call GodotSettings()
augroup end

if !has_key( g:, 'ycm_language_server' )
  let g:ycm_language_server = []
endif

let g:ycm_language_server += [
  \   {
  \     'name': 'godot',
  \     'filetypes': [ 'gdscript' ],
  \     'project_root_files': [ 'project.godot' ],
  \     'port': 6008
  \   }
  \ ]

" Enable ALE auto completion globally
let g:ale_completion_enabled = 1

" Allow ALE to autoimport completion entries from LSP servers
let g:ale_completion_autoimport = 1

let g:godot_executable = '/Applications/Godot.app'

" Register LSP server for Godot:
call ale#linter#Define('gdscript', {
\   'name': 'godot',
\   'lsp': 'socket',
\   'address': '127.0.0.1:6008',
\   'project_root': 'project.godot',
\})
"""""""""
" end godot "
"""""""""
"
"
